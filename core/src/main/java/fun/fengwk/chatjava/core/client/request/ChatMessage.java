package fun.fengwk.chatjava.core.client.request;

import fun.fengwk.chatjava.core.client.response.ChatToolCall;
import fun.fengwk.chatjava.core.client.response.ChatToolCallFunction;
import lombok.Data;

import java.util.List;

/**
 * @author fengwk
 */
@Data
public class ChatMessage {

    public static final String ROLE_SYSTEM = "system";
    public static final String ROLE_USER = "user";
    public static final String ROLE_ASSISTANT = "assistant";
    public static final String ROLE_TOOL = "tool";

    /* common */

    /**
     * 消息的内容
     */
    private String content;

    /**
     * 原因内容
     */
    private String reasoning_content;

    /**
     * 角色：system | user | assistant | tool
     */
    private String role;

    /* request */

    /**
     * 参与者名称，可以选填的参与者的名称，为模型提供信息以区分相同角色的参与者
     */
    private String name;

    /**
     * for tool request
     */
    private String tool_call_id;

    /* response */

    /**
     * The tool calls generated by the model, such as function calls.
     */
    private List<ChatToolCall> tool_calls;

    /**
     * Deprecated and replaced by tool_calls. The name and arguments of a function that should be called, as generated by the model.
     */
    @Deprecated
    private ChatToolCallFunction function_call;

    /**
     * 构建system消息
     *
     * @param content 消息内容
     * @return system消息
     */
    public static ChatMessage newSystemMessage(String content) {
        ChatMessage message = new ChatMessage();
        message.setContent(content);
        message.setRole(ROLE_SYSTEM);
        return message;
    }

    /**
     * 构建user消息
     *
     * @param content 消息内容
     * @return user消息
     */
    public static ChatMessage newUserMessage(String content) {
        return newUserMessage(content, null);
    }

    /**
     * 构建user消息
     *
     * @param content 消息内容
     * @param name 用户名
     * @return user消息
     */
    public static ChatMessage newUserMessage(String content, String name) {
        ChatMessage message = new ChatMessage();
        message.setContent(content);
        message.setName(name);
        message.setRole(ROLE_USER);
        return message;
    }

    /**
     * 构建assistant消息
     *
     * @param content 消息内容
     * @return assistant消息
     */
    public static ChatMessage newAssistantMessage(String content) {
        ChatMessage message = new ChatMessage();
        message.setContent(content);
        message.setRole(ROLE_ASSISTANT);
        return message;
    }

    /**
     * 构建tool消息
     *
     * @param toolCallId 函数调用id
     * @param content    消息内容
     * @return tool消息
     */
    public static ChatMessage newToolMessage(String toolCallId, String content) {
        ChatMessage message = new ChatMessage();
        message.setTool_call_id(toolCallId);
        message.setContent(content);
        message.setRole(ROLE_TOOL);
        return message;
    }

}
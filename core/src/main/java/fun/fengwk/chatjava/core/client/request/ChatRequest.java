package fun.fengwk.chatjava.core.client.request;

import fun.fengwk.chatjava.core.client.util.ChatMiscUtils;
import lombok.Data;

import java.util.*;

/**
 * see <a href="https://platform.openai.com/docs/api-reference/chat/create">Create chat completion / Request body</a>
 *
 * @author fengwk
 */
@Data
public class ChatRequest {

    /**
     * required
     */
    private List<ChatMessage> messages;

    /**
     * required
     */
    private String model;

    /**
     * Number between -2.0 and 2.0.
     * Positive values penalize new tokens based on their existing frequency in the text so far,
     * decreasing the model's likelihood to repeat the same line verbatim.
     */
    private Float frequency_penalty;

    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, * the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection;
     * values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    private Map<String, Float> logit_bias;

    /**
     * Whether to return log probabilities of the output tokens or not.
     * If true,returns the log probabilities of each output token returned in the content of message.
     * This option is currently not available on the gpt-4-vision-preview model.
     */
    private Boolean logprobs;

    /**
     * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position,
     * each with an associated log probability. logprobs must be set to true if this parameter is used.
     */
    private Integer top_logprobs;

    /**
     * The maximum number of tokens that can be generated in the chat completion.
     */
    private Integer max_tokens;

    /**
     * How many chat completion choices to generate for each input message.
     * Note that you will be charged based on the number of generated tokens across all of the choices.
     * Keep n as 1 to minimize costs.
     */
    private Integer n;

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
     * increasing the model's likelihood to talk about new topics.
     */
    private Float presence_penalty;

    /**
     * An object specifying the format that the model must output.
     * Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106.
     * Setting to { "type": "json_object" } enables JSON mode, which guarantees the message the model generates is valid JSON.
     * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message.Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
     */
    private Map<String, String> response_format;

    /**
     * This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.
     */
    private Integer seed;

    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    private List<String> stop;

    /**
     * If set, partial message deltas will be sent, like in ChatGPT.
     */
    private Boolean stream;

    /**
     * Options for streaming response. Only set this when you set stream: true.
     */
    private ChatStreamOptions stream_options;

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     */
    private Float temperature;

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     */
    private Float top_p;

    /**
     * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
     */
    private List<ChatTool> tools;

    /**
     * Controls which (if any) function is called by the model. none means the model will not call a function and instead generates a message. auto means the model can pick between generating a message or calling a function. Specifying a particular function via {"type": "function", "function": {"name": "my_function"}} forces the model to call that function.
     */
    private Map<String, Objects> tool_choice;

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
     */
    private String user;

    /**
     * Deprecated in favor of tool_choice.
     * Controls which (if any) function is called by the model. none means the model will not call a function and instead generates a message. auto means the model can pick between generating a message or calling a function. Specifying a particular function via {"name": "my_function"} forces the model to call that function.
     * none is the default when no functions are present. auto is the default if functions are present.
     */
    @Deprecated
    private Map<String, Objects> function_call;

    /**
     * Deprecated in favor of tools.
     * A list of functions the model may generate JSON inputs for.
     */
    @Deprecated
    private List<ChatToolFunction> functions;

    /**
     * 拷贝一份新的ChatRequest
     *
     * @return ChatRequest
     */
    public ChatRequest copy() {
        ChatRequest chatRequest = new ChatRequest();
        chatRequest.setMessages(ChatMiscUtils.nullSafeMap(getMessages(), ArrayList::new));
        chatRequest.setModel(getModel());
        chatRequest.setFrequency_penalty(getFrequency_penalty());
        chatRequest.setLogit_bias(ChatMiscUtils.nullSafeMap(getLogit_bias(), HashMap::new));
        chatRequest.setLogprobs(getLogprobs());
        chatRequest.setTop_logprobs(getTop_logprobs());
        chatRequest.setMax_tokens(getMax_tokens());
        chatRequest.setN(getN());
        chatRequest.setPresence_penalty(getPresence_penalty());
        chatRequest.setResponse_format(ChatMiscUtils.nullSafeMap(getResponse_format(), HashMap::new));
        chatRequest.setSeed(getSeed());
        chatRequest.setStop(ChatMiscUtils.nullSafeMap(getStop(), ArrayList::new));
        chatRequest.setStream(getStream());
        chatRequest.setTemperature(getTemperature());
        chatRequest.setTop_p(getTop_p());
        chatRequest.setTools(ChatMiscUtils.nullSafeMap(getTools(), ArrayList::new));
        chatRequest.setTool_choice(ChatMiscUtils.nullSafeMap(getTool_choice(), HashMap::new));
        chatRequest.setUser(getUser());
        chatRequest.setFunction_call(ChatMiscUtils.nullSafeMap(getFunction_call(), HashMap::new));
        chatRequest.setFunctions(ChatMiscUtils.nullSafeMap(getFunctions(), ArrayList::new));
        return chatRequest;
    }

}
